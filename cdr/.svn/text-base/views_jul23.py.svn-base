# Create your views here.
from django.shortcuts import render_to_response
from django.http import HttpResponse, HttpResponseRedirect
from django.template import RequestContext
from django.contrib.auth.decorators import login_required
from django.utils import simplejson
from apis.api import write_exception,get_request_type
from django.contrib.auth import authenticate
from django.contrib.auth.views import logout_then_login
import logging
from tagging.models import Category,Taggeddata,Categorygroup
import xlrd
from content.models import Content


def createcategory(request):
	logging.debug("Got here addcreate category=============")
	categorygroup = Categorygroup.objects.all()
	return render_to_response('tagging/addcategory.html', context_instance=RequestContext(request, {'categorygroup':categorygroup})) 

def addcategory(request):
	logging.debug("Got add=================category=============")
	response_dict={'status':1}
	try:
		qd = get_request_type(request)
		cname = qd.__getitem__('cname')
		cdescription = qd.__getitem__('cdescription')
		cexample = qd.__getitem__('cexample')
		cgroup = qd.__getitem__('cgroup')
	except:
		write_exception("Exception while retriving user data")
		response_dict.update({"status":0})
		response_dict.update({"msg":"Exception while retriving user data"})
	
	try:
		category = Category.objects.filter(name=cname)
		if len(category) > 0 :
			response_dict.update({'msg':'Category already exists'})
			response_dict.update({"status":2})
		else:
			category = Category()
			category.name = cname
			category.description = cdescription
			category.example = cexample
			category.categorygroup_id = cgroup
			category.save()
			response_dict.update({"msg":"Category saved successfully"})
	except:
		write_exception("Error while saving category")
		response_dict.update({"status":0})
		response_dict.update({"msg":"Error while saving category"})
	
	return HttpResponse(simplejson.dumps(response_dict), mimetype='application/javascript')

def save_csv(csv_file,cnt):
	ret = 1
	arr = []
	try:
		#wb = xlrd.open_workbook(str(csv_file),encoding_override="cp1252")   ##To specify UTF8-encoding
		#wb.sheet_names()
		#sh =  wb.sheet_by_index(0)
		#num_of_rows = sh.nrows
		#num_of_cols = sh.ncols
		f = open(csv_file)
		for l in f:
			parts = l.split("\t")
			logging.debug(parts)
			logging.debug("===================================")
			counter = 1
			if(len(parts) > 6):
				ret = 2
				for obj in arr:
					obj.delete()
				return ret
			else:
				taggeddata = Taggeddata()
				for data in parts:
					if counter == 1:
						taggeddata.field1 = data
					elif counter == 2:
						taggeddata.field2 = data
					elif counter == 3:
						taggeddata.field3 = data
					elif counter == 4:
						taggeddata.field4 = data
					elif counter == 5:
						taggeddata.field5 = data
					elif counter == 6:
						taggeddata.field6 = data
					logging.debug(data)
				taggeddata.content_id = cnt.id
				taggeddata.save()
				arr.append(taggeddata)
		return ret
	except:
		write_exception("Error while processing data and storing")
		ret = 0
		for obj in arr:
			obj.delete()
		return ret
					
def createcategorygroup(request):
	logging.debug("Got here addcreate category=============")
	return render_to_response('tagging/addcategorygroup.html', context_instance=RequestContext(request, {})) 


def addcategorygroup(request):
	logging.debug("Got add=================categorygroup=============")
	response_dict={'status':1}
	try:
		qd = get_request_type(request)
		cgroup = qd.__getitem__('cgroup')
		cdescription = qd.__getitem__('cdescription')
	except:
		write_exception("Exception while retriving user data")
		response_dict.update({"status":0})
		response_dict.update({"msg":"Exception while retriving user data"})
	
	try:
		categorygroup = Categorygroup.objects.filter(name=cgroup)
		if len(categorygroup) > 0 :
			response_dict.update({'msg':'Category already exists'})
			response_dict.update({"status":2})
		else:
			categorygroup = Categorygroup()
			categorygroup.name = cgroup 
			categorygroup.description = cdescription
			categorygroup.save()
			response_dict.update({"msg":"Category saved successfully"})
	except:
		write_exception("Error while saving category")
		response_dict.update({"status":0})
		response_dict.update({"msg":"Error while saving category"})
	
	return HttpResponse(simplejson.dumps(response_dict), mimetype='application/javascript')

def addtag(request):
	response_dict = {}
	try:
		logging.debug(" Got request for adding tag")
		content= Content.objects.get(pk=33)
		td = Taggeddata.objects.filter(content=content)
		categorygroup = Categorygroup.objects.all()
		category = Category.objects.all()
		response_dict.update({'taggeddata':td,'categorygroup':categorygroup,'category':category})
	except:
		write_exception("Addtag exception")
	return render_to_response('tagging/addtag.html', context_instance=RequestContext(request, {'response_dict':response_dict})) 
	

